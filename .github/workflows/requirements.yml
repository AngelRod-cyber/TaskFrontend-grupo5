name: angular-build-security-docker

on:
  workflow_call:
    inputs:
      dockerhub-repo:
        description: "Nombre completo del repo DockerHub"
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  setup:
    name: üß± Build & Test Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node

  test:
    name: ‚úÖ Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Install Angular CLI
        run: npm install -g @angular/cli
      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -fy install
      - name: Run tests
        run: ng test --watch=false --browsers=ChromeHeadless --code-coverage
      - name: Build dist folder
        run: ng build --configuration=production
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-folder
          path: dist/

  sonar:
    name: üìä SonarCloud Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Install SonarScanner
        run: npm install -g sonar-scanner
      - name: Download coverage and dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage/
      - uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: dist/
      - name: SonarCloud analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=AngelRod-cyber_TaskFrontend-grupo5 \
            -Dsonar.organization=angelrod-cyber \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/*.spec.ts \
            -Dsonar.tests=src \
            -Dsonar.test.inclusions=**/*.spec.ts \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  docker-job:
    name: üê≥ Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Install Angular CLI
        run: npm install -g @angular/cli
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: dist/
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build Docker image
        run: docker build -t ${{ inputs.dockerhub-repo }}:latest .
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
      - name: Scan Docker image with Trivy
        run: |
          ./bin/trivy image --format table ${{ inputs.dockerhub-repo }}:latest || true
      - name: Push image to DockerHub
        run: docker push ${{ inputs.dockerhub-repo }}:latest